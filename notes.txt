ng-init:
=======
http://plnkr.co/edit/Yvd73HiFS8dXvpvpEeFu?p=preview
<body ng-init="rows = [{name: 'row1'}, {name: 'row2'}, {name: 'row3'}, {name: 'row4'}]">

ng-include::
==========
[[any string in ng tags is in fact evaluated as an angular expression.]]
" tells angular it that it's a string expression.

--"expression" in ng-include 
http://plnkr.co/edit/Yvd73HiFS8dXvpvpEeFu?p=preview
<tr ng-repeat="row in rows" ng-include="row.enabled && row.name + '.html'"></tr>

--"statement/expression" ng statement.
WRONG: <div ng-include="{{workspace.TemplateUrl}}"></div>
CORRECT: <div ng-include="workspace.TemplateUrl"></div>

--"'string'" in ng-include 
http://docs.angularjs.org/api/ng/directive/ngInclude as 1.directive, 2.attribute, 3.css.
<div ng-include src="'views/sidepanel.html'"></div>

[[any string in ng tags is in fact evaluated as an angular expression.]]
" tells angular it that it's a string expression.

//http://stackoverflow.com/questions/12521905/angularjs-ng-include-does-not-include-view-unless-passed-in-scope
ng-include accepts an expression. 
If you want to specify the explicit url directly in there, you have to give a string.

```````````````````````````````````````````

<div ng-repeat="item in items" ng-include="'views/template.html'"></div>
OR
# # html:
<div ng-repeat="item in items">
   <my-include></my-include>
</div>
# # js:
angular.module("app").directive("myInclude", function() {
return {
    restrict: "E",
    templateUrl: "/views/template.html"
}
})
```````````````````````````````````````````
@Override::
=========
What I think is happening: 
The template is attached to the parent controller before the controller on that element is initiated, 
creating a sibling relationship instead of child-parent.

As you can see the change was to raise ngInclude's priority from 0 to 1000, athough more recently it was lowered to 400. 
In any case this is higher than the default of 0, which is ngController's priority.
This explains why increasing ngController's priority to 1000 fixes the issue. 
I believe that this is the right solution but the question is what is the best priority for ngController?

To monkey patch this in the mean time I've decorated ngController to change the priority:
$provide.decorator('ngControllerDirective', ['$delegate', function($delegate) {
    $delegate[0].priority = 900;
    return $delegate;
}]);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
