scope injection
===============
function myController1 = function($scope) {
    // not safe for minification
}

function myController2 = ['$scope', function(sc) {
    // safe for minification, you could even rename scope
}]

var myController3 = function(sc) {
    // safe for minification, but might be hard
    // to read if controller code gets longer
}
myController3.$inject = ['$scope'];            <<------------
_____________________________________________________________________________________________________
getting scope from dom element
==============================
function tellAngular() {
    console.log("tellAngular call");
    var domElt = document.getElementById('someDiv');
    scope = angular.element(domElt).scope();    <<---------
    scope.$apply(function() {
        scope.width = window.innerWidth;
        scope.height = window.innerHeight;
    });
}
______________________________________________________________________________________________________
scope watch     //'watch' compares the reference instead of the object by default
===========     //add 'true' to the end to have it compare the value instead 
                //::caution:: deep comparisons like this have a performance cost
                
scope.$watch('seats', function(newval, oldval){
                console.log(newval, oldval);
                updateSeatInfo(scope,element);
            }, true);                           <<------------------

-----------------------------------------------------------------------------------------------------
directive scope
==============

isolated scope: {
            name: "@",    //(  Text binding / one-way binding )
            color: "=",   //( Direct model binding / two-way binding )
            reverse: "&"  //( Behaviour binding / Method binding  )
         },
        
------------------------------------------------------------------------------------------------------        
4 types of scopes:
==================
http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs/14049482#14049482
https://github.com/angular/angular.js/wiki/Understanding-Scopes

1.normal prototypal scope inheritance -- 
-ng-include, ng-switch, ng-controller, directive with scope: true

2.normal prototypal scope inheritance with a [ copy/assignment ] -- 
Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.
-ng-repeat. 

3.isolate scope -- directive with scope: {...}. 
This one is not prototypal, but '=', '@', and '&' provide a mechanism to access parent scope properties, via attributes.
http://umur.io/angularjs-directives-using-isolated-scope-with-attributes/
-Text Binding (Prefix: @)
-One-way Binding (Prefix: &)
-Two-way Binding (Prefix: =)

4.transcluded scope -- directive with transclude: true. 
This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.

-----------------------------------------------------------------------------------------------------
http://jasonmore.net/angular-js-directives-difference-controller-link/

when do I want my code to run?”

Before compilation? – Controller
After compilation? – Link

parent (compile)
..child 1 (compile)
....child 1 a (compile)
....child 1 b (compile)
..child 2 (compile)
....child 2 a (compile)
....child 2 b (compile)
parent (controller)
parent (pre-link)
..child 1 (controller)
..child 1 (pre-link)
....child 1 a (controller)
....child 1 a (pre-link)
....child 1 a (post-link)
....child 1 b (controller)
....child 1 b (pre-link)
....child 1 b (post-link)
..child 1 (post-link)
..child 2 (controller)
..child 2 (pre-link)
....child 2 a (controller)
....child 2 a (pre-link)
....child 2 a (post-link)
....child 2 b (controller)
....child 2 b (pre-link)
....child 2 b (post-link)
..child 2 (post-link)
parent (post-link)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


