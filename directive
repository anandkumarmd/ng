Things get much easier in Angular if you focus on data && state, !events.

$scope = view model for DOM.
!!!!!--------------------------------------------------------------------------------------------


DYNAMICALLY ADDING DIRECTIVES:
==============================
http://stackoverflow.com/questions/22192284/angularjs-add-directive-from-within-controller
app.directive('copyExpenditure', function(){
          return {
            restrict: 'A',
            scope: true,
            template: '<button ng-click="copyExpenditure()">click me</button>'
          }
});

on ngClick calls 
var LinkFormatter = function (row, cell, value, columnDef, dataContext) {
    var tag = '<div copy-expenditure></div>';
    return tag;
}
( ? getting html but not as directive ? )
-->>
1. $compile(angular.element('<div copy-expenditure></div>'))($scope);

and if you have some values passed into it from scope, you do this after compile:

2. $scope.$digest();




Injecting, Compiling, & Linking https://github.com/angular/angular.js/wiki/Understanding-Directives
===============================


How Directives are Compiled

When the application bootstraps, Angular starts parsing the DOM using the $compile service. 
This service searches for directives in the markup and matches them against registered directives. 
Once all the directives have been identified, Angular executes their compile functions. 
As previously mentioned, the compile function returns a link function which is added to the list of link functions to be executed later. 
This is called the compile phase. 

If a directive needs to be cloned multiple times (e.g. ng-repeat), we get a performance benefit as the compile function runs once for the cloned template, 
but the link function runs for each cloned instance. That’s why the compile function does not receive a scope.

After the compile phase is over the linking phase, where the collected link functions are executed one by one, starts. 
This is where the templates produced by the directives are evaluated against correct scope and are turned into live DOM which react to events!


//http://www.sitepoint.com/practical-guide-angularjs-directives-part-two/
app.directive('helloWorld', function() {//2nd argument is a function which returns a directive definition object. 
  return {
    restrict: 'AE', (attribute, eleemnt, class, comment)
    template: '<p style="background-color:{{color}}">Hello World',
          //http://stackoverflow.com/questions/15285635/how-to-use-replace-of-directive-definition
          //w/ replace=true => replace the current element with the contents of the HTML. 
          //The replacement process migrates all of the attributes / classes from the old element to the new one.
    replace: true =>  
                    1.content of the directive's 'template' will replace the element that the directive is declared
                    2.migrates all of the attributes / classes from the old/directive's element to the new one.)
           : false => create a child element (simple)          
    transclude: false/true/element (
    //transclude:'element' and transclude:true
    //http://stackoverflow.com/questions/15285635/how-to-use-replace-of-directive-definition
    //http://plnkr.co/edit/k9qSx15fhSZRMwgAIMP4?p=preview
    ng-transclude says where to put the transcluded content. 
    In this case the DOM content <p>Hello {{name}}</p> is extracted and put inside <div ng-transclude></div>
    template: '<div ng-transclude></div>'
    
    //#Parent Scope[scope:false] vs. #Child Scope[scope:true] vs. #Isolated Scope[scope:{}]
      <hello-world color="color" change-color='change()'/>
    scope: {//isoloated
      //one-way binding (string); parent scope property changes, your isolated scope model also changes. only pass strings to the attribute  
      color: '@colorAttr'// => attribute color-attr (isolated scope property == the attribute name, use only '@')
      //two-way binding (object);
      color: '='
      //excute funtions on parent scope
      changeColor:'&' [
          <hello-world color="color" change-color='change()'/>
          parentController >> $scope.change=function(){ return $scope.colors[Math.floor((Math.random()*3))];}
          link >> elem.bind('mouseover',function(){scope.$apply(function(){scope.color=scope.changeColor();});
      ]
    }
    
    controller: function($scope, $compile, $http) {this.addChild = function(nestedDirective) {};}
    //controller & require (need outer directive controller)
    require: '^outerDirective',
    link: function(scope, elem, attrs, controllerInstance) {controllerInstance.addChild(scope);}//4th args is controller instance you require
    
    //compile:(returns link)//perform any DOM transformation before the link function runs; accepts 2 arguments(ele, attr).
    link: function(scope, elem, attrs) {//default a directive gets the parent’s scope. 
      elem.bind('click', function() {
        elem.css('background-color', 'white');
        scope.$apply(function() {
          scope.color = "white";
        });
      });
      elem.bind('mouseover', function() {
        elem.css('cursor', 'pointer');
      });
    }
  };
});


























-------------------------------------------------------------------------------------------------------
http://www.bennadel.com/blog/2449-Directive-Link-observe-And-watch-Functions-Execute-Inside-An-AngularJS-Context.htm

When you run code inside an AngularJS Controller or Service object, you never have to worry about calling $apply() since your code is executing inside of an AngularJS "context." 
By this, I mean that AngularJS is aware that your code is running and will perform a dirty-check after the code has completed. 
When you're inside a Directive, however, AngularJS' view of the world is a bit more limited; 
it is the job of the Directive to call $apply() (or trigger $apply with something like $timeout) when AngularJS needs to be told about changes to the View Model (ie. $scope). 
Knowing when to do this, however, is a little tricky because some aspects of the Directive are actually executing inside of an AngularJS context.

you have to tell AngularJS about all changes to the $scope that occurred inside of the Directive

there are aspets of the Directive that AngularJS is already monitoring. Specifically, AngularJS already knows about:

The link functions.
The attribute $observe() handlers.
The $scope $watch() handlers.

If you make changes to the $scope inside the synchronous execution of the link function, or the asynchronous execution of the $observe() and $watch() handlers, 
you're already executing inside of an AngularJS context. 
This means that AngularJS will perform a dirty-check after your code has run. 
And, AngularJS will trigger additional $digest life-cycles if necessary.

::LIVE UPDATE

perfomance (on dom create, in link)
http://www.bennadel.com/blog/2443-Rendering-DOM-Elements-With-ngRepeat-In-AngularJS.htm

hashcopy
http://www.bennadel.com/blog/2472-HashKeyCopier-An-AngularJS-Utility-Class-For-Merging-Cached-And-Live-Data.htm
If a DOM node is re-created, all of the directives attached to that entire descendant DOM tree will be $destroy'd and then re-linked.
JavaScript operations are super fast. DOM (Document Object Model) operations are, by comparison, much slower.
created an AngularJS utility class - HashKeyCopier. 
This class exposes one "static" method that will recurse through two objects, 
copying the $$hashKey entries form the source object over to the destination object:

----------------------------------------------------------------------------------------------


## DRY ## don't repeat yourself
Directives are already hard, keep them simple. Don’t ping the server or reformat underlying data.
directive should either take data in as 
1.an attribute through scope.$eval 
2.and/or have a controller to handle acquiring and storing the data.

jquery with ng
http://thecodebarbarian.wordpress.com/2013/09/23/the-8020-guide-to-writing-angularjs-directives/comment-page-1/


directive for element/attribute/event (http://seanhess.github.io/2013/10/14/angularjs-directive-design.html)
app.element('button', ...
app.attribute('toggle', ...
app.event('scroll', ...

DATA BINDING => set of functions associated with a scope
SCOPE (TREE) => execution context for the expressions you write in your HTML.
                contains a set of named variables and is organized in a TREE structure, 
                so expressions in a given scope can access variables from an ancestor scope in the tree.
data binding adds 3 powerful functions to a scope that enable you to assign an event handler to fire when a variable in scope changes.                

1.$watch() 
$scope.$$watchers (list of watchers (expression, callback)
This function takes an expression and a callback: the callback will be called when the value of the expression changes.
Under the hood, each scope has a list of watchers, internally called $scope.$$watchers, which contain the expression and the callback function. 
The $watch simply adds a new watcher to the $$watchers array, which AngularJS loops over when it thinks something that can change the state of the scope.  

  Unbinding $watch() Listeners In AngularJS (http://www.bennadel.com/blog/2480-Unbinding-watch-Listeners-In-AngularJS.htm)
When you invoke the $watch() method, to create a binding, AngularJS returns a "deregistration" function. 
This function can then be used to unbind your $watch() listener - all you have to do is invoke this returned function and
your $watch() listener will be removed.

var unbindWatcher = 
    $scope.$watch("clickCount", function( newClickCount ) {
         console.log( "Watching click count." );
         if ( newClickCount >= 5 ) {
             $scope.isShowingFeedback = true;
             // Once the feedback has been displayed, there's no more need to watch the change in the model value.
           unbindWatcher();
         }
     }
  
2.$apply() 
onchange in expression, ng runs through its watchers, calls callback func.
When called without arguments, $apply lets AngularJS know that something happened that may have changed the state of the scope, so AngularJS knows to run through its watchers. 
You usually don’t have to call $apply() yourself, because directives like ngClick do it for you. 
However, if you’re writing your own event handler, like the swipeLeft and swipeRight directives from my guide to directives, 
you need to plug $apply() into your event handler.

3.digest()  
$digest() runs through every watcher in the scope, evaluates the expression, and checks if the value of the expression has changed.
If the value has changed, AngularJS calls the change callback with the new value and the old value.
[most important one. With high probability, you will never actually call $digest() directly, since $apply() does that for you]
AngularJS scopes are organized in a tree structure and a scope can access its ancestor’s variables.
each iteration of the $digest() loop does a depth-first search and performs the watcher check on every child scope. 
If any child scope is dirty, the loop has to run again!

//http://stackoverflow.com/questions/14876112/difference-between-observers-and-watchers
$observe() => change in html attribute value 
is a method on the Attributes object, and as such, it can only be used to observe/watch the value change of a DOM attribute.


$apply => function that notifies AngularJS when some event has happened, that may require updating the view.
$eval => ? which does a safe eval on its parameter in the scope.
$compile =>
$watch =>

@ load (preLint,postLink,compile,etc,...) http://docs.angularjs.org/guide/directive
AngularJS lets you do different things with your directive at different steps of its internal processing, 
providing options like preLink, postLink, compile, etc.
